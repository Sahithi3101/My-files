import threading

# Merge function to combine two sorted halves
def merge(left, right):
    result = []
    i = j = 0

    # Compare elements and merge
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # Add remaining elements
    result += left[i:]
    result += right[j:]
    return result

# The main merge sort function (multi-threaded)
def threaded_merge_sort(arr):
    # If the array is very small, just return it
    if len(arr) <= 1:
        return arr

    # Find the middle
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # Sort left and right halves using threads
    sorted_left = []
    sorted_right = []

    def sort_left():
        nonlocal sorted_left
        sor
